#! /bin/bash
######################################################################
#
# Introduction to Parallel Computing (A.Y. 2023/2024)
# Homework 2: Parallelizing matrix operations using OpenMP
#
# Job Submission script
#
# Alessandro Iepure
#
######################################################################

######################################################################
#PBS -N IntroPARCO-Assignment2
#PBS -q short_cpuQ
#PBS -o /home/$USER/assignment2/out/stdout.o
#PBS -e /home/$USER/assignment2/out/stderr.e
#PBS -l select=1:ncpus=32:ompthreads=32
##PBS -m abe
##PBS -M alessandro.iepure@studenti.unitn.it
######################################################################

set -e  # exit on any error

# Check if running on the cluster and gather node(s) information
hostname=$(hostname)
if [[ "$hostname" == "hpc"* ]]; then
  on_cluster=True

  # Print working node(s) info
  NODES=$(sort -u $PBS_NODEFILE)
  for NODE in $NODES; do
      echo "Node: $NODE"
      ssh $NODE "lscpu"
  done
else
  on_cluster=False
fi

# Work dirs
if [ "$on_cluster" = True ]; then
  work_dir="/home/$USER/assignment2"
  #mkdir -p "$work_dir"
  cd "$work_dir"
else
  work_dir="."
fi
mkdir -p "$work_dir"/bin "$work_dir"/out

# Output files
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-200.csv
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-400.csv
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-600.csv
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-800.csv
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-1000.csv
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-1200.csv
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-1400.csv
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-1600.csv
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-1800.csv
printf "cores, serial, openMP\n" > "$work_dir"/out/mult-2000.csv
printf "block, cores, serial, serial_blocks, openMP, openMP_blocks\n" > "$work_dir"/out/trans-20000.csv
printf "block, cores, serial, serial_blocks, openMP, openMP_blocks\n" > "$work_dir"/out/trans-30000.csv
printf "block, cores, serial, serial_blocks, openMP, openMP_blocks\n" > "$work_dir"/out/trans-40000.csv
printf "block, cores, serial, serial_blocks, openMP, openMP_blocks\n" > "$work_dir"/out/trans-50000.csv

# Compilation
gcc -std=c99 -fopenmp -o "$work_dir"/bin/multiplication.out "$work_dir"/src/multiplication.c
gcc -std=c99 -fopenmp -o "$work_dir"/bin/transposition.out "$work_dir"/src/transposition.c

# Execution
multiplication () {
  printf "multiplication: %dx%d" "$1" "$1"
  output_line="1, $(OMP_NUM_THREADS=1 "$work_dir"/bin/multiplication.out dense "$1" "$1" "$1" "$1")"; echo "$output_line" >> "$work_dir"/out/mult-"$1".csv; printf "."
  output_line="2, $(OMP_NUM_THREADS=2 "$work_dir"/bin/multiplication.out dense "$1" "$1" "$1" "$1")"; echo "$output_line" >> "$work_dir"/out/mult-"$1".csv; printf "."
  output_line="4, $(OMP_NUM_THREADS=4 "$work_dir"/bin/multiplication.out dense "$1" "$1" "$1" "$1")"; echo "$output_line" >> "$work_dir"/out/mult-"$1".csv; printf "."
  output_line="8, $(OMP_NUM_THREADS=8 "$work_dir"/bin/multiplication.out dense "$1" "$1" "$1" "$1")"; echo "$output_line" >> "$work_dir"/out/mult-"$1".csv; printf "."
  if [ "$on_cluster" = True ]; then
    output_line="16, $(OMP_NUM_THREADS=16 "$work_dir"/bin/multiplication.out dense "$1" "$1" "$1" "$1")"; echo "$output_line" >> "$work_dir"/out/mult-"$1".csv; printf "."
    output_line="32, $(OMP_NUM_THREADS=32 "$work_dir"/bin/multiplication.out dense "$1" "$1" "$1" "$1")"; echo "$output_line" >> "$work_dir"/out/mult-"$1".csv; printf "."
  fi
  printf "\n"
}

transposition () {
  printf "transposition: %dx%d" "$1" "$1"
  output_line="$2, 1, $(OMP_NUM_THREADS=1 "$work_dir"/bin/transposition.out "$1" "$1" "$2" "$2")"; echo "$output_line" >> "$work_dir"/out/trans-"$1".csv; printf "."
  output_line="$2, 2, $(OMP_NUM_THREADS=2 "$work_dir"/bin/transposition.out "$1" "$1" "$2" "$2")"; echo "$output_line" >> "$work_dir"/out/trans-"$1".csv; printf "."
  output_line="$2, 4, $(OMP_NUM_THREADS=4 "$work_dir"/bin/transposition.out "$1" "$1" "$2" "$2")"; echo "$output_line" >> "$work_dir"/out/trans-"$1".csv; printf "."
  output_line="$2, 8, $(OMP_NUM_THREADS=8 "$work_dir"/bin/transposition.out "$1" "$1" "$2" "$2")"; echo "$output_line" >> "$work_dir"/out/trans-"$1".csv; printf "."
  if [ "$on_cluster" = True ]; then
      output_line="$2, 16, $(OMP_NUM_THREADS=16 "$work_dir"/bin/transposition.out "$1" "$1" "$2" "$2")"; echo "$output_line" >> "$work_dir"/out/trans-"$1".csv; printf "."
      output_line="$2, 32, $(OMP_NUM_THREADS=32 "$work_dir"/bin/transposition.out "$1" "$1" "$2" "$2")"; echo "$output_line" >> "$work_dir"/out/trans-"$1".csv; printf "."
  fi
  printf "\n"
}

multiplication 200
multiplication 400
multiplication 600
multiplication 800
multiplication 1000
multiplication 1200
multiplication 1400
multiplication 1600
multiplication 1800
multiplication 2000

transposition 20000 1000
transposition 20000 2000
transposition 20000 5000
transposition 20000 10000
transposition 30000 1000
transposition 30000 2000
transposition 30000 5000
transposition 30000 10000
transposition 40000 1000
transposition 40000 2000
transposition 40000 5000
transposition 40000 10000
transposition 50000 1000
transposition 50000 2000
transposition 50000 5000
transposition 50000 10000
